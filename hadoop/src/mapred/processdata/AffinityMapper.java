package mapred.processdata;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by Darren on 4/27/2017.
 */
public class AffinityMapper extends Mapper<Text, Text, Text, DoubleWritable> {

    Map<String, Integer> subTotalComments;

    /*
     * Obtain list of subreddits with total number of comments posted in that subreddit
     * List of total comments for each subreddit generated by
     * SubCountMapper/Reducer
     * data format per row: subreddit \t total_count
     */
    @Override
    protected void setup(Context context) throws IOException, InterruptedException {
        super.setup(context);
        Configuration config = context.getConfiguration();
        String[] lines = config.get("subTotalComments").split("\n");
        
        for (String line : lines){
            String[] l = line.split("\t");

            String sub = l[0];
            Integer count = Integer.parseInt(l[1]);

            subTotalComments.put(sub, count);
        }
    }

    /*
     * Input: author sub1,count1;sub2,count2;sub3,count3; etc...
     * Output: author subreddit affinity_score
     */
    @Override
    protected void map(Text key, Text value, Context context) throws IOException, InterruptedException {
        String line = value.toString();
        String[] author_subVector = line.split("\\s+", 2);
        String author = author_subVector[0];

        Map<String, Integer> subs = parseSubVector(author_subVector[1]);

        // for each sub in the vector
        // check if it's a sub we care about from subTotalComments
        // if we do care about it, create an affinity score of it
        for (Map.Entry<String, Integer> e : subs.entrySet()){
            String sub = e.getKey();

            //if sub exists in subTotalComments
            //calculate affinity score and write
            if(subTotalComments.containsKey(sub)){
                Double aScore = e.getValue() / subTotalComments.get(sub);
                context.write(new Text(author), new DoubleWritable(aScore));
            }
        }

    }

    /**
     * De-serialize the feature vector into a map
     * 
     * @param subVector
     *            The format is "sub1:count1;sub2:count2;...;wordN:countN;"
     * @return A HashMap, with key being each word and value being the count.
     */
    private Map<String, Integer> parseSubVector(String subVector) {
        Map<String, Integer> subMap = new HashMap<String, Integer>();
        String[] subs = subVector.split(",");
        for (String sub : subs) {
            String[] sub_count = sub.split(";");
            subMap.put(sub_count[0], Integer.parseInt(sub_count[1]));
        }
        return featureMap;
    }

}
